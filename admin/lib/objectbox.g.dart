// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'entities/category.entity.dart';
import 'entities/condition.entity.dart';
import 'entities/interaction.entity.dart';
import 'entities/item.entity.dart';
import 'entities/plan.entity.dart';
import 'entities/review.entity.dart';
import 'entities/symptom.entity.dart';
import 'entities/user.entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7806765401882797447),
      name: 'Categories',
      lastPropertyId: const IdUid(2, 1121097204077795970),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 28748554648550329),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1121097204077795970),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'items', srcEntity: 'Items', srcField: 'category')
      ]),
  ModelEntity(
      id: const IdUid(2, 5986005423263010849),
      name: 'Conditions',
      lastPropertyId: const IdUid(5, 1398040144537815062),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 391267820563259121),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 814300341116384779),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1260432410944525588),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1513425294690531650),
            name: 'causes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1398040144537815062),
            name: 'complications',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'plan', srcEntity: 'Plans', srcField: 'condition')
      ]),
  ModelEntity(
      id: const IdUid(3, 8621907411299843905),
      name: 'Interactions',
      lastPropertyId: const IdUid(2, 6960900155722985525),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4028612958952719904),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6960900155722985525),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'items', srcEntity: 'Items', srcField: 'interaction')
      ]),
  ModelEntity(
      id: const IdUid(4, 6644129876722853788),
      name: 'Items',
      lastPropertyId: const IdUid(8, 3067654329482706073),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 72941138034332000),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1724775811736867913),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1908984524209361412),
            name: 'alsoCalled',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2814183948107592584),
            name: 'uses',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9150252976372292906),
            name: 'caution',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5767486325703111958),
            name: 'conscientiousConsumerInformation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3503385693335441211),
            name: 'references',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3067654329482706073),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 4908385215839360328),
            relationTarget: 'Categories')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7347061679394884413),
            name: 'interaction',
            targetId: const IdUid(3, 8621907411299843905))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'plan', srcEntity: 'Plans', srcField: 'item')
      ]),
  ModelEntity(
      id: const IdUid(5, 2431819095945767469),
      name: 'Plans',
      lastPropertyId: const IdUid(9, 8158834730784329572),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6670189019723500002),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2508037678704692455),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9019127136511020909),
            name: 'instructions',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1028816857275346092),
            name: 'dosage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 244386773097433177),
            name: 'precautions',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7080190993588741347),
            name: 'references',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5079962094859706215),
            name: 'itemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 8490061785408420002),
            relationTarget: 'Items'),
        ModelProperty(
            id: const IdUid(8, 7790021062484151168),
            name: 'conditionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1131986213422414484),
            relationTarget: 'Conditions'),
        ModelProperty(
            id: const IdUid(9, 8158834730784329572),
            name: 'symptomId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8562071040032529783),
            relationTarget: 'Symptoms')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 7747607459947028685),
            name: 'user',
            targetId: const IdUid(8, 2146476382941573708))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'review', srcEntity: 'Reviews', srcField: 'plan')
      ]),
  ModelEntity(
      id: const IdUid(6, 8673298358073854871),
      name: 'Reviews',
      lastPropertyId: const IdUid(5, 8206311918605620636),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 379534733033686050),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4853039394188566793),
            name: 'rating',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 406091506683901285),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2780989668252564296),
            name: 'planId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 3809604855529647290),
            relationTarget: 'Plans'),
        ModelProperty(
            id: const IdUid(5, 8206311918605620636),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7597413820881268621),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1686984687260612170),
      name: 'Symptoms',
      lastPropertyId: const IdUid(5, 2163561365698008536),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7779203916722705925),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 154226630374681810),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7919152681218196796),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6773821545529377326),
            name: 'causes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2163561365698008536),
            name: 'complications',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'plan', srcEntity: 'Plans', srcField: 'symptom')
      ]),
  ModelEntity(
      id: const IdUid(8, 2146476382941573708),
      name: 'User',
      lastPropertyId: const IdUid(4, 6277229786717074658),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3300170380458440103),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5343874657353532536),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3455692167462282047),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6277229786717074658),
            name: 'passwordHash',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 7195852163040398707),
            name: 'review',
            targetId: const IdUid(6, 8673298358073854871)),
        ModelRelation(
            id: const IdUid(4, 7162050956083916627),
            name: 'plan',
            targetId: const IdUid(5, 2431819095945767469))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 2146476382941573708),
      lastIndexId: const IdUid(6, 7597413820881268621),
      lastRelationId: const IdUid(4, 7162050956083916627),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Categories: EntityDefinition<Categories>(
        model: _entities[0],
        toOneRelations: (Categories object) => [],
        toManyRelations: (Categories object) => {
              RelInfo<Items>.toOneBacklink(
                      8, object.id, (Items srcObject) => srcObject.category):
                  object.items
            },
        getId: (Categories object) => object.id,
        setId: (Categories object, int id) {
          object.id = id;
        },
        objectToFB: (Categories object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Categories(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Categories>(
              object.items,
              store,
              RelInfo<Items>.toOneBacklink(
                  8, object.id, (Items srcObject) => srcObject.category));
          return object;
        }),
    Conditions: EntityDefinition<Conditions>(
        model: _entities[1],
        toOneRelations: (Conditions object) => [],
        toManyRelations: (Conditions object) => {
              RelInfo<Plans>.toOneBacklink(
                      8, object.id, (Plans srcObject) => srcObject.condition):
                  object.plan
            },
        getId: (Conditions object) => object.id,
        setId: (Conditions object, int id) {
          object.id = id;
        },
        objectToFB: (Conditions object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final causesOffset = fbb.writeList(
              object.causes.map(fbb.writeString).toList(growable: false));
          final complicationsOffset = fbb.writeList(object.complications
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, causesOffset);
          fbb.addOffset(4, complicationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final complicationsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final causesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = Conditions(
              name: nameParam,
              description: descriptionParam,
              complications: complicationsParam,
              causes: causesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Conditions>(
              object.plan,
              store,
              RelInfo<Plans>.toOneBacklink(
                  8, object.id, (Plans srcObject) => srcObject.condition));
          return object;
        }),
    Interactions: EntityDefinition<Interactions>(
        model: _entities[2],
        toOneRelations: (Interactions object) => [],
        toManyRelations: (Interactions object) =>
            {RelInfo<Items>.toManyBacklink(1, object.id): object.items},
        getId: (Interactions object) => object.id,
        setId: (Interactions object, int id) {
          object.id = id;
        },
        objectToFB: (Interactions object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object = Interactions(description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Interactions>(
              object.items, store, RelInfo<Items>.toManyBacklink(1, object.id));
          return object;
        }),
    Items: EntityDefinition<Items>(
        model: _entities[3],
        toOneRelations: (Items object) => [object.category],
        toManyRelations: (Items object) => {
              RelInfo<Items>.toMany(1, object.id): object.interaction,
              RelInfo<Plans>.toOneBacklink(
                      7, object.id, (Plans srcObject) => srcObject.item):
                  object.plan
            },
        getId: (Items object) => object.id,
        setId: (Items object, int id) {
          object.id = id;
        },
        objectToFB: (Items object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final alsoCalledOffset = fbb.writeString(object.alsoCalled);
          final usesOffset = fbb.writeString(object.uses);
          final cautionOffset = fbb.writeString(object.caution);
          final conscientiousConsumerInformationOffset =
              fbb.writeString(object.conscientiousConsumerInformation);
          final referencesOffset = fbb.writeString(object.references);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, alsoCalledOffset);
          fbb.addOffset(3, usesOffset);
          fbb.addOffset(4, cautionOffset);
          fbb.addOffset(5, conscientiousConsumerInformationOffset);
          fbb.addOffset(6, referencesOffset);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final alsoCalledParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final usesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final cautionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final conscientiousConsumerInformationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final referencesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Items(
              name: nameParam,
              alsoCalled: alsoCalledParam,
              uses: usesParam,
              caution: cautionParam,
              conscientiousConsumerInformation:
                  conscientiousConsumerInformationParam,
              references: referencesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.category.attach(store);
          InternalToManyAccess.setRelInfo<Items>(
              object.interaction, store, RelInfo<Items>.toMany(1, object.id));
          InternalToManyAccess.setRelInfo<Items>(
              object.plan,
              store,
              RelInfo<Plans>.toOneBacklink(
                  7, object.id, (Plans srcObject) => srcObject.item));
          return object;
        }),
    Plans: EntityDefinition<Plans>(
        model: _entities[4],
        toOneRelations: (Plans object) =>
            [object.item, object.condition, object.symptom],
        toManyRelations: (Plans object) => {
              RelInfo<Plans>.toMany(2, object.id): object.user,
              RelInfo<Reviews>.toOneBacklink(
                      4, object.id, (Reviews srcObject) => srcObject.plan):
                  object.review
            },
        getId: (Plans object) => object.id,
        setId: (Plans object, int id) {
          object.id = id;
        },
        objectToFB: (Plans object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final instructionsOffset = fbb.writeString(object.instructions);
          final dosageOffset = fbb.writeString(object.dosage);
          final precautionsOffset = fbb.writeString(object.precautions);
          final referencesOffset = fbb.writeString(object.references);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, instructionsOffset);
          fbb.addOffset(3, dosageOffset);
          fbb.addOffset(4, precautionsOffset);
          fbb.addOffset(5, referencesOffset);
          fbb.addInt64(6, object.item.targetId);
          fbb.addInt64(7, object.condition.targetId);
          fbb.addInt64(8, object.symptom.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final instructionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final dosageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final precautionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final referencesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = Plans(
              name: nameParam,
              instructions: instructionsParam,
              dosage: dosageParam,
              precautions: precautionsParam,
              references: referencesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.item.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.item.attach(store);
          object.condition.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.condition.attach(store);
          object.symptom.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.symptom.attach(store);
          InternalToManyAccess.setRelInfo<Plans>(
              object.user, store, RelInfo<Plans>.toMany(2, object.id));
          InternalToManyAccess.setRelInfo<Plans>(
              object.review,
              store,
              RelInfo<Reviews>.toOneBacklink(
                  4, object.id, (Reviews srcObject) => srcObject.plan));
          return object;
        }),
    Reviews: EntityDefinition<Reviews>(
        model: _entities[5],
        toOneRelations: (Reviews object) => [object.plan, object.user],
        toManyRelations: (Reviews object) => {},
        getId: (Reviews object) => object.id,
        setId: (Reviews object, int id) {
          object.id = id;
        },
        objectToFB: (Reviews object, fb.Builder fbb) {
          final ratingOffset = fbb.writeString(object.rating);
          final commentOffset = fbb.writeString(object.comment);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ratingOffset);
          fbb.addOffset(2, commentOffset);
          fbb.addInt64(3, object.plan.targetId);
          fbb.addInt64(4, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final ratingParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final commentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Reviews(rating: ratingParam, comment: commentParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.plan.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.plan.attach(store);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.user.attach(store);
          return object;
        }),
    Symptoms: EntityDefinition<Symptoms>(
        model: _entities[6],
        toOneRelations: (Symptoms object) => [],
        toManyRelations: (Symptoms object) => {
              RelInfo<Plans>.toOneBacklink(
                      9, object.id, (Plans srcObject) => srcObject.symptom):
                  object.plan
            },
        getId: (Symptoms object) => object.id,
        setId: (Symptoms object, int id) {
          object.id = id;
        },
        objectToFB: (Symptoms object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final causesOffset = fbb.writeList(
              object.causes.map(fbb.writeString).toList(growable: false));
          final complicationsOffset = fbb.writeList(object.complications
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, causesOffset);
          fbb.addOffset(4, complicationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final complicationsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final causesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = Symptoms(
              name: nameParam,
              description: descriptionParam,
              complications: complicationsParam,
              causes: causesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Symptoms>(
              object.plan,
              store,
              RelInfo<Plans>.toOneBacklink(
                  9, object.id, (Plans srcObject) => srcObject.symptom));
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[7],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<User>.toMany(3, object.id): object.review,
              RelInfo<User>.toMany(4, object.id): object.plan
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordHashOffset = fbb.writeString(object.passwordHash);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordHashOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordHashParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = User(
              name: nameParam,
              email: emailParam,
              passwordHash: passwordHashParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<User>(
              object.review, store, RelInfo<User>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<User>(
              object.plan, store, RelInfo<User>.toMany(4, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Categories] entity fields to define ObjectBox queries.
class Categories_ {
  /// see [Categories.id]
  static final id =
      QueryIntegerProperty<Categories>(_entities[0].properties[0]);

  /// see [Categories.name]
  static final name =
      QueryStringProperty<Categories>(_entities[0].properties[1]);
}

/// [Conditions] entity fields to define ObjectBox queries.
class Conditions_ {
  /// see [Conditions.id]
  static final id =
      QueryIntegerProperty<Conditions>(_entities[1].properties[0]);

  /// see [Conditions.name]
  static final name =
      QueryStringProperty<Conditions>(_entities[1].properties[1]);

  /// see [Conditions.description]
  static final description =
      QueryStringProperty<Conditions>(_entities[1].properties[2]);

  /// see [Conditions.causes]
  static final causes =
      QueryStringVectorProperty<Conditions>(_entities[1].properties[3]);

  /// see [Conditions.complications]
  static final complications =
      QueryStringVectorProperty<Conditions>(_entities[1].properties[4]);
}

/// [Interactions] entity fields to define ObjectBox queries.
class Interactions_ {
  /// see [Interactions.id]
  static final id =
      QueryIntegerProperty<Interactions>(_entities[2].properties[0]);

  /// see [Interactions.description]
  static final description =
      QueryStringProperty<Interactions>(_entities[2].properties[1]);
}

/// [Items] entity fields to define ObjectBox queries.
class Items_ {
  /// see [Items.id]
  static final id = QueryIntegerProperty<Items>(_entities[3].properties[0]);

  /// see [Items.name]
  static final name = QueryStringProperty<Items>(_entities[3].properties[1]);

  /// see [Items.alsoCalled]
  static final alsoCalled =
      QueryStringProperty<Items>(_entities[3].properties[2]);

  /// see [Items.uses]
  static final uses = QueryStringProperty<Items>(_entities[3].properties[3]);

  /// see [Items.caution]
  static final caution = QueryStringProperty<Items>(_entities[3].properties[4]);

  /// see [Items.conscientiousConsumerInformation]
  static final conscientiousConsumerInformation =
      QueryStringProperty<Items>(_entities[3].properties[5]);

  /// see [Items.references]
  static final references =
      QueryStringProperty<Items>(_entities[3].properties[6]);

  /// see [Items.category]
  static final category =
      QueryRelationToOne<Items, Categories>(_entities[3].properties[7]);

  /// see [Items.interaction]
  static final interaction =
      QueryRelationToMany<Items, Interactions>(_entities[3].relations[0]);
}

/// [Plans] entity fields to define ObjectBox queries.
class Plans_ {
  /// see [Plans.id]
  static final id = QueryIntegerProperty<Plans>(_entities[4].properties[0]);

  /// see [Plans.name]
  static final name = QueryStringProperty<Plans>(_entities[4].properties[1]);

  /// see [Plans.instructions]
  static final instructions =
      QueryStringProperty<Plans>(_entities[4].properties[2]);

  /// see [Plans.dosage]
  static final dosage = QueryStringProperty<Plans>(_entities[4].properties[3]);

  /// see [Plans.precautions]
  static final precautions =
      QueryStringProperty<Plans>(_entities[4].properties[4]);

  /// see [Plans.references]
  static final references =
      QueryStringProperty<Plans>(_entities[4].properties[5]);

  /// see [Plans.item]
  static final item =
      QueryRelationToOne<Plans, Items>(_entities[4].properties[6]);

  /// see [Plans.condition]
  static final condition =
      QueryRelationToOne<Plans, Conditions>(_entities[4].properties[7]);

  /// see [Plans.symptom]
  static final symptom =
      QueryRelationToOne<Plans, Symptoms>(_entities[4].properties[8]);

  /// see [Plans.user]
  static final user =
      QueryRelationToMany<Plans, User>(_entities[4].relations[0]);
}

/// [Reviews] entity fields to define ObjectBox queries.
class Reviews_ {
  /// see [Reviews.id]
  static final id = QueryIntegerProperty<Reviews>(_entities[5].properties[0]);

  /// see [Reviews.rating]
  static final rating =
      QueryStringProperty<Reviews>(_entities[5].properties[1]);

  /// see [Reviews.comment]
  static final comment =
      QueryStringProperty<Reviews>(_entities[5].properties[2]);

  /// see [Reviews.plan]
  static final plan =
      QueryRelationToOne<Reviews, Plans>(_entities[5].properties[3]);

  /// see [Reviews.user]
  static final user =
      QueryRelationToOne<Reviews, User>(_entities[5].properties[4]);
}

/// [Symptoms] entity fields to define ObjectBox queries.
class Symptoms_ {
  /// see [Symptoms.id]
  static final id = QueryIntegerProperty<Symptoms>(_entities[6].properties[0]);

  /// see [Symptoms.name]
  static final name = QueryStringProperty<Symptoms>(_entities[6].properties[1]);

  /// see [Symptoms.description]
  static final description =
      QueryStringProperty<Symptoms>(_entities[6].properties[2]);

  /// see [Symptoms.causes]
  static final causes =
      QueryStringVectorProperty<Symptoms>(_entities[6].properties[3]);

  /// see [Symptoms.complications]
  static final complications =
      QueryStringVectorProperty<Symptoms>(_entities[6].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[7].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[7].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[7].properties[2]);

  /// see [User.passwordHash]
  static final passwordHash =
      QueryStringProperty<User>(_entities[7].properties[3]);

  /// see [User.review]
  static final review =
      QueryRelationToMany<User, Reviews>(_entities[7].relations[0]);

  /// see [User.plan]
  static final plan =
      QueryRelationToMany<User, Plans>(_entities[7].relations[1]);
}
